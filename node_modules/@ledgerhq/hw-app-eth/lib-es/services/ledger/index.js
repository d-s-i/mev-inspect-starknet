var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
// This implements the resolution of a Transaction using Ledger's own API
import { log } from "@ledgerhq/logs";
import { Interface } from "@ethersproject/abi";
import { loadInfosForContractMethod } from "./contracts";
import { byContractAddressAndChainId } from "./erc20";
import { getNFTInfo, loadNftPlugin } from "./nfts";
import { decodeTxInfo } from "../../utils";
var ledgerService = {
    resolveTransaction: function (rawTxHex, loadConfig, resolutionConfig) { return __awaiter(void 0, void 0, void 0, function () {
        function provideERC20TokenInformation(dataHex) {
            resolution.erc20Tokens.push(dataHex);
        }
        function provideNFTInformation(dataHex) {
            resolution.nfts.push(dataHex);
        }
        function setExternalPlugin(payload, signature) {
            resolution.externalPlugin.push({ payload: payload, signature: signature });
        }
        function setPlugin(dataHex) {
            resolution.plugin.push(dataHex);
        }
        var resolution, rawTx, _a, decodedTx, chainIdTruncated, provideForContract, selector, nftPluginPayload, _b, infos, _c, plugin, payload, signature, erc20OfInterest, abi, contract, args, erc20OfInterest_1, erc20OfInterest_1_1, path, address, e_1_1;
        var e_1, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    resolution = {
                        erc20Tokens: [],
                        nfts: [],
                        externalPlugin: [],
                        plugin: []
                    };
                    rawTx = Buffer.from(rawTxHex, "hex");
                    _a = decodeTxInfo(rawTx), decodedTx = _a.decodedTx, chainIdTruncated = _a.chainIdTruncated;
                    provideForContract = function (address) { return __awaiter(void 0, void 0, void 0, function () {
                        var nftInfo, _a, erc20Info;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!resolutionConfig.nft) return [3 /*break*/, 2];
                                    return [4 /*yield*/, getNFTInfo(address, chainIdTruncated, loadConfig)];
                                case 1:
                                    _a = _b.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    _a = null;
                                    _b.label = 3;
                                case 3:
                                    nftInfo = _a;
                                    if (nftInfo) {
                                        log("ethereum", "loaded nft info for " +
                                            nftInfo.contractAddress +
                                            " (" +
                                            nftInfo.collectionName +
                                            ")");
                                        provideNFTInformation(nftInfo.data);
                                    }
                                    else {
                                        erc20Info = byContractAddressAndChainId(address, chainIdTruncated);
                                        if (erc20Info) {
                                            log("ethereum", "loaded erc20token info for " +
                                                erc20Info.contractAddress +
                                                " (" +
                                                erc20Info.ticker +
                                                ")");
                                            provideERC20TokenInformation(erc20Info.data.toString("hex"));
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    if (!(decodedTx.data.length >= 10)) return [3 /*break*/, 19];
                    selector = decodedTx.data.substring(0, 10);
                    if (!resolutionConfig.nft) return [3 /*break*/, 2];
                    return [4 /*yield*/, loadNftPlugin(decodedTx.to, selector, chainIdTruncated, loadConfig)];
                case 1:
                    _b = _e.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _b = null;
                    _e.label = 3;
                case 3:
                    nftPluginPayload = _b;
                    if (!nftPluginPayload) return [3 /*break*/, 4];
                    setPlugin(nftPluginPayload);
                    return [3 /*break*/, 17];
                case 4:
                    if (!resolutionConfig.externalPlugins) return [3 /*break*/, 6];
                    return [4 /*yield*/, loadInfosForContractMethod(decodedTx.to, selector, chainIdTruncated, loadConfig)];
                case 5:
                    _c = _e.sent();
                    return [3 /*break*/, 7];
                case 6:
                    _c = null;
                    _e.label = 7;
                case 7:
                    infos = _c;
                    if (!infos) return [3 /*break*/, 16];
                    plugin = infos.plugin, payload = infos.payload, signature = infos.signature, erc20OfInterest = infos.erc20OfInterest, abi = infos.abi;
                    if (plugin) {
                        log("ethereum", "found plugin for " + selector);
                        setExternalPlugin(payload, signature);
                    }
                    if (!(erc20OfInterest && erc20OfInterest.length && abi)) return [3 /*break*/, 15];
                    contract = new Interface(abi);
                    args = contract.parseTransaction(decodedTx).args;
                    _e.label = 8;
                case 8:
                    _e.trys.push([8, 13, 14, 15]);
                    erc20OfInterest_1 = __values(erc20OfInterest), erc20OfInterest_1_1 = erc20OfInterest_1.next();
                    _e.label = 9;
                case 9:
                    if (!!erc20OfInterest_1_1.done) return [3 /*break*/, 12];
                    path = erc20OfInterest_1_1.value;
                    address = path.split(".").reduce(function (value, seg) {
                        if (seg === "-1" && Array.isArray(value)) {
                            return value[value.length - 1];
                        }
                        return value[seg];
                    }, args);
                    return [4 /*yield*/, provideForContract(address)];
                case 10:
                    _e.sent();
                    _e.label = 11;
                case 11:
                    erc20OfInterest_1_1 = erc20OfInterest_1.next();
                    return [3 /*break*/, 9];
                case 12: return [3 /*break*/, 15];
                case 13:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 15];
                case 14:
                    try {
                        if (erc20OfInterest_1_1 && !erc20OfInterest_1_1.done && (_d = erc20OfInterest_1["return"])) _d.call(erc20OfInterest_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 15: return [3 /*break*/, 17];
                case 16:
                    log("ethereum", "no infos for selector " + selector);
                    _e.label = 17;
                case 17: return [4 /*yield*/, provideForContract(decodedTx.to)];
                case 18:
                    _e.sent();
                    _e.label = 19;
                case 19: return [2 /*return*/, resolution];
            }
        });
    }); }
};
export default ledgerService;
//# sourceMappingURL=index.js.map